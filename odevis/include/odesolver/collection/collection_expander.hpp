#ifndef PROJECT_COLLECTIONSEXPANDER_HPP
#define PROJECT_COLLECTIONSEXPANDER_HPP

#include <devdat/header.hpp>
#include <devdat/devdat.hpp>
#include <devdat/util/thrust_functors.hpp>
#include <odesolver/util/monitor.hpp>
#include <odesolver/collection/collection.hpp>


namespace odesolver {
    namespace collections {
        /** @brief Class for extracting and linearizing the information about
         * parent indices per recursive depth per element for the given
         * collections. The class allows for a computation of vectors of parent
         * indices and a vector of the depth per element */
        class CollectionExpander
        {
        public:
            /** @brief Constructor for extracting information about the indices
             * packed in each collection and for preparing a computation of
             * respective elements in the recursive search tree.
             *
             * @param maximum_depth: Maximum recursive depth of the provided
             * collections
             * @param number_of_collections: Expected number of provided
             * collections
             */
            CollectionExpander(
                const int maximum_depth,
                const int number_of_collections
            );

            /** @brief Extracts based on the provided collections information
             * about the indices of the elements in the recursive search tree
             * and prepares vectors for expanding the collection information to
             * obtain single elements.
             * 
             * @param collection_package: Collections to be considered for a further processing.
             * 
             * Example output
             * Number of elements per collection: 4 8 8 // number_of_elements_per_collection
             * Depth per collection: 5 5 5 // depth_per_collection
             * Collected parent indices in depth 0: 90 90 90
             * Collected parent indices in depth 1: 3 3 3
             * Collected parent indices in depth 2: 1 1 1
             * Collected parent indices in depth 3: 1 1 1
             * Collected parent indices in depth 4: 3 5 7
             */
            void extract_collection_information(const std::vector<Collection*> &collection_package);

            /** @brief Uses the vectors generated by
             * extract_collection_information to fill the provided vectors
             * containing the specific recursive search path to each element
             * encoded by the respective indices.
             * 
             * @param collection_package: Collections to be considered for a further processing.
             * @param expanded_element_indices: DevDat containing the expanded indices
             * @param expanded_depth_per_element: Recursive depth per element
             * Example output
             * Expanded indices after filling with individual indices in depth 0: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
             * Expanded indices after filling with individual indices in depth 1: 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
             * Expanded indices after filling with individual indices in depth 2: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
             * Expanded indices after filling with individual indices in depth 3: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
             * Expanded indices after filling with individual indices in depth 4: 3 3 3 3 5 5 5 5 5 5 5 5 7 7 7 7 7 7 7 7
             * Expanded indices after filling with individual indices in depth 5: 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
             * Expanded depth per collection: 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
             */
            void expand_collection_information(
                const std::vector<Collection*> &collection_package,
                devdat::DevDatInt& expanded_element_indices,
                devdat::DimensionIteratorInt& expanded_depth_per_element
            );

        private:
            int expected_number_of_elements_;
            int expected_depth_;

            /** @brief List of vectors of size number_of_collections containing
             * the parent indices for each collection and depth. Each vector
             * refers to a different recursive depth. */
            thrust::host_vector<dev_vec_int> collected_parent_indices_;
            /** @brief Vector of length number_of_collections refering to the
             * number of elements of each collection */
            dev_vec_int number_of_elements_per_collection_;
            /** @brief Vector of length number_of_collections containing the
             * final depth for each collection */
            dev_vec_int depth_per_collection_;
        };
    }
}

#endif //PROJECT_COLLECTIONSEXPANDER_HPP
