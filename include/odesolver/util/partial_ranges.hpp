#ifndef PROGRAM_PARTIAL_RANGES_HPP
#define PROGRAM_PARTIAL_RANGES_HPP

#include <odesolver/header.hpp>


namespace odesolver {
    namespace util {
        struct PartialRanges
        {
            /** @brief Helper class allowing for the preparation of a finite
             * grid on a hyperplane, characterised by n_branches,
             * partial_variable_ranges and fixed_variables.
             * @param n_branches: Number of branches per dimension. Dimensions
             * with a fixed variable are supposed to be indicated with a 1, for
             * example, {10, 1, 10}, with the second dimension referring to a
             * fixed variable
             * @param partial_variable_ranges: Parameter ranges of the non-fixed
             * variables
             * @param fixed_variables: List of vectors of fixed variables
             * determining the position of the hyperplane in the
             * higher-dimensional space. For each vector of this list,
             * respective variable_ranges can be generated by the [] operator.
             * @param extend: Wether to add extend the variable ranges to have the upper bound as the lower bound of the last hypercube in each dimension
             */
            PartialRanges(
                const std::vector<int> n_branches,
                const std::vector<std::pair<cudaT, cudaT>> partial_variable_ranges,
                const std::vector<std::vector<cudaT>> fixed_variables=std::vector<std::vector<cudaT>>{},
                const bool extend=false
            );

            size_t size() const;

            std::vector<std::pair<cudaT, cudaT>> operator[] (int i) const;

            std::vector<int> n_branches_;
            std::vector<std::pair<cudaT, cudaT>> partial_variable_ranges_;
            std::vector<std::vector<cudaT>> fixed_variables_;
            bool extend_;
        };
    }
}

#endif //PROGRAM_PARTIAL_RANGES_HPP
